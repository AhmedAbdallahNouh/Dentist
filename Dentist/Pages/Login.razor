@page "/login"
@inject Account _account
@inject SignInManager<AppUser> SignInMgr
@inject UserManager<AppUser> UserMgr
@inject AuthenticationStateProvider AuthStatProvider
@inject ILocalStorageService localStorage


<h3>Login</h3>

<h3>Token : @Token</h3>

<EditForm Model="loginDTO" OnValidSubmit="Save">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
               <div>
                <lable>Email</lable>
                <InputText @bind-Value="loginDTO.Email" class="form-control"></InputText>
        <ValidationMessage For="()=>loginDTO.Email" class="text-danger"></ValidationMessage>
            </div>
            <div>
                <lable>Password</lable>
        <InputText type="password" @bind-Value="loginDTO.Password" class="form-control"></InputText>
        <ValidationMessage For="()=>loginDTO.Password" class="text-danger"></ValidationMessage>
            </div>
    <input type="submit" value="Save" />
</EditForm>
<AuthorizeView>
    <button @onclick="LogOut">Log Out</button>
</AuthorizeView>
@code {
    public LoginDTO loginDTO { get; set; } = new LoginDTO();

    public string Token { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Fetch the token from local storage
            Token = await localStorage.GetItemAsStringAsync("token");

            // Update the authentication state
            await AuthStatProvider.GetAuthenticationStateAsync();
        }
    }
    [Inject]
    public NavigationManager navManager { get; set; }

    public async Task Save()
    {
        AppUser? user = await UserMgr.FindByEmailAsync(loginDTO.Email);
        if (user != null)
        {
            bool valid = await UserMgr.CheckPasswordAsync(user, loginDTO.Password);
            if (valid)
            {
                var userRoles = await UserMgr.GetRolesAsync(user);
                var token = _account.LoginGenerateToken(loginDTO , user , userRoles.ToList());
                Token = token;
                Console.WriteLine(token);
                await localStorage.SetItemAsync("token", token);
                await AuthStatProvider.GetAuthenticationStateAsync();
            }           
        }
        else
            navManager.NavigateTo("/login");    
    }

    public async void LogOut()
    {
        await localStorage.RemoveItemAsync("token");
        await AuthStatProvider.GetAuthenticationStateAsync();
    }
}
