@page "/login"
@inject Account _account
@inject SignInManager<AppUser> SignInMgr
@inject UserManager<AppUser> UserMgr
@inject AuthenticationStateProvider AuthStatProvider
@inject IJSRuntime JSruntime
@inject ILocalStorageService localStorage



<div class="row login-row">
    <div class="col-6 login-first-column main-login-image-container ">
        <img class="login-img"  src="/assets/img/dnt/register-login.jpeg"/>
    </div>
    <div class="col-4 register-form-div">
        <EditForm Model="loginDTO" OnValidSubmit="Save">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
            <div>
                <lable class="login-register-label">Email</lable>
                <InputText @bind-Value="loginDTO.Email" class="form-control login-input"></InputText>
                <ValidationMessage For="()=>loginDTO.Email" class="text-danger"></ValidationMessage>
            </div>
            <div>
                <lable class="login-register-label">Password</lable>
                <InputText type="password" @bind-Value="loginDTO.Password" class="form-control login-input"></InputText>
                <ValidationMessage For="()=>loginDTO.Password" class="text-danger"></ValidationMessage>
            </div>
            <div class="login-btn-div">
                <input class="login-btn" type="submit" value="Login" />
            </div>
        </EditForm>

        <u><a id="forgot" data-bs-toggle="modal" data-bs-target="#exampleModal" class="font-weight-bold forgot-password-a">Forgot Password.</a></u>
    </div>
</div>

<ForgotPasswordModal></ForgotPasswordModal>

@code {
    public LoginDTO loginDTO { get; set; } = new LoginDTO();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           

            // Update the authentication state
            await AuthStatProvider.GetAuthenticationStateAsync();
        }
    }
    [Inject]
    public NavigationManager navManager { get; set; }

    public async Task Save()
    {
        AppUser? user = await UserMgr.FindByEmailAsync(loginDTO.Email);
        if (user != null)
        {
            bool valid = await UserMgr.CheckPasswordAsync(user, loginDTO.Password);
            if (valid)
            {
                var userRoles = await UserMgr.GetRolesAsync(user);
                var token = _account.LoginGenerateToken(loginDTO , user , userRoles.ToList());          
                Console.WriteLine(token);
                await localStorage.SetItemAsync("token", token);
                await AuthStatProvider.GetAuthenticationStateAsync();
                navManager.NavigateTo("/");    
            }           
        }
        else
            navManager.NavigateTo("/login");    
    }
}
