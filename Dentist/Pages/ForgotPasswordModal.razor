@inject IJSRuntime JSruntime
@inject Account _account


<!-- modal -->
<!-- Vertically centered modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Enter your Email To Reset Password</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">


                <EditForm Model="loginDTO" >
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
                    <div>
                        <lable class="login-register-label">Email</lable>
                        <InputText @bind-Value="loginDTO.Email" class="form-control login-input"></InputText>
                        <ValidationMessage For="()=>loginDTO.Email" class="text-danger"></ValidationMessage>
                    </div>                          
                </EditForm>   
            </div>
            <div class="modal-footer">
                <button id="closeBtn" type="button" class="btn btn-secondary close-message-btn" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary send-message-btn" @onclick="confirmToSend">Send message</button>
            </div>
        </div>
    </div>
</div>
@code {
    public LoginDTO loginDTO { get; set; } = new LoginDTO();

    public async void confirmToSend()
    {
        await _account.forgotPassword(loginDTO.Email);
        await JSruntime.InvokeVoidAsync("showForgotPasswordModal");
    }
}
